#!/bin/bash

VERSION="v0.1"
PROGRAM="${0##*/}"
COMMAND="$1"
ROOT_FOLDER="$HOME/.wut"

COLOR_RED="\033[0;31m"
COLOR_BLUE="\033[1;34m"
COLOR_CLEAR="\033[0m"

load_history() {
  folder_check
  HISTORY=($(cat $ROOT_FOLDER/.history))
  SHEET=${HISTORY[0]}
  SUBJECT=${HISTORY[1]}
  NOTE=${HISTORY[2]}
}

save_history() {
  if [ ! -z $SHEET   ]; then echo $SHEET   >  $ROOT_FOLDER/.history; fi
  if [ ! -z $SUBJECT ]; then echo $SUBJECT >> $ROOT_FOLDER/.history; fi
  if [ ! -z $NOTE    ]; then echo $NOTE    >> $ROOT_FOLDER/.history; fi
}

folder_check() {
  if [ ! -f "$ROOT_FOLDER/.history" ]; then
    echo "Couldn't find wut folder. Please initialize wut:"
    echo "  $PROGRAM init"
    exit 1
  fi 
}

cmd_init() {
  if [ -f "$ROOT_FOLDER/.history" ]; then
    echo "Wut has already been initialized"
  else
    echo "Initializing wut.."
    mkdir $ROOT_FOLDER 2> /dev/null
    cat > $ROOT_FOLDER/.history << "EOF"
-
-
-
EOF
  fi
}

cmd_usage() {
  cmd_version
  echo
  cat << EOF
  Usage:
      $PROGRAM init
          Initialize workspace
      $PROGRAM list
          List notes
      $PROGRAM add [sheet] [subject] [note]
	  Add a new note
      $PROGRAM edit [sheet] [subject] [note]
	  Edit an existing note
      $PROGRAM delete [sheet] [subject] [note]
	  Delete a sheet, subject or note
      $PROGRAM show [subject]
	  Show all entries of a subject
      $PROGRAM git git-command-args...
          If the password store is a git repository, execute a git command
          specified by git-command-args.
      $PROGRAM help|wut|-h|--help
          Show this text.
      $PROGRAM version|-v|--version
          Show version information.
EOF
}

cmd_version() {
  echo "wut - ${VERSION}"
}

cmd_list() {
  folder_check
  SHEETS=($(ls $ROOT_FOLDER))
  for SHEET in ${SHEETS[@]}; do
    echo $SHEET
    SUBJECTS=($(ls $ROOT_FOLDER/$SHEET))
    for SUBJECT in ${SUBJECTS[@]}; do
      NOTES=($(ls $ROOT_FOLDER/$SHEET/$SUBJECT))
      LAST_SUBJECT=${SUBJECTS[${#SUBJECTS[@]}-1]}
      if [[ $SUBJECT == $LAST_SUBJECT ]]; then
	echo "\`-${SUBJECT}"
	SUBJECT_PREFIX="  "
      else
	echo "|-${SUBJECT}"
	SUBJECT_PREFIX="| "
      fi
      for NOTE in ${NOTES[@]}; do
	LAST_NOTE=${NOTES[${#NOTES[@]}-1]}
	if [[ $NOTE == $LAST_NOTE ]]; then
	  echo "${SUBJECT_PREFIX}\`-${NOTE}"
	else
	  echo "${SUBJECT_PREFIX}|-${NOTE}"
	fi
      done
    done
  done
}

cmd_add() {
  load_history

  if [ -z "$1" ]; then
    echo -n "Please enter sheet[$SHEET]: "
    read _SHEET
    if [ ! -z $_SHEET ]; then SHEET=$_SHEET; fi
  else
    SHEET=$1
  fi
  mkdir $ROOT_FOLDER/$SHEET 2> /dev/null

  if [ -z "$2" ]; then
    echo -n "Please enter subject[$SUBJECT]: "
    read _SUBJECT
    if [ ! -z $_SUBJECT ]; then SUBJECT=$_SUBJECT; fi
  else
    SUBJECT=$2
  fi
  mkdir $ROOT_FOLDER/$SHEET/$SUBJECT 2> /dev/null

  if [ -z "$3" ]; then
    echo -n "Please enter note[$NOTE]: "
    read _NOTE
    if [ ! -z $_NOTE ]; then NOTE=$_NOTE; fi
  else
    NOTE=$3
  fi

  cat > $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE << "EOF"
# Hi! This is the place where you want to write your note. Please start
# every line that's code with a '$' and wut will make sure it looks a-OK!

EOF
  vim $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE

  save_history
}

cmd_show() {
  load_history

  if [ -z "$1" ]; then
    echo -n "Please enter sheet[$SHEET]: "
    read _SHEET
    if [ ! -z $_SHEET ]; then SHEET=$_SHEET; fi
  else
    SHEET=$1
  fi

  if [ -z "$2" ]; then
    echo -n "Please enter subject[$SUBJECT]: "
    read _SUBJECT
    if [ ! -z $_SUBJECT ]; then SUBJECT=$_SUBJECT; fi
  else
    SUBJECT=$2
  fi

  if [ -z "$3" ]; then
    echo -n "Please enter note[$NOTE]: "
    read _NOTE
    if [ ! -z $_NOTE ]; then NOTE=$_NOTE; fi
  else
    NOTE=$3
  fi

  if [ -f $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE ]; then
    while read -r LINE; do
      if [[ $LINE =~ ^\$ ]]; then
	echo -e "$COLOR_RED$LINE$COLOR_CLEAR"
      else
	echo -e "$COLOR_BLUE$LINE$COLOR_CLEAR"
      fi
    done <<< "$(grep "^[^#]" $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE)"
  else
    echo "Couldn't find that note, please check if it exists with the following command:"
    echo "  ${PROGRAM} list"
  fi

  save_history
}

cmd_edit() {
  load_history

  if [ -z "$1" ]; then
    echo -n "Please enter sheet[$SHEET]: "
    read _SHEET
    if [ ! -z $_SHEET ]; then SHEET=$_SHEET; fi
  else
    SHEET=$1
  fi

  if [ -z "$2" ]; then
    echo -n "Please enter subject[$SUBJECT]: "
    read _SUBJECT
    if [ ! -z $_SUBJECT ]; then SUBJECT=$_SUBJECT; fi
  else
    SUBJECT=$2
  fi

  if [ -z "$3" ]; then
    echo -n "Please enter note[$NOTE]: "
    read _NOTE
    if [ ! -z $_NOTE ]; then NOTE=$_NOTE; fi
  else
    NOTE=$3
  fi

  if [ -f $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE ]; then
    vim $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE
  else
    echo "Couldn't find that note, please check if it exists using the following command:"
    echo "  ${PROGRAM} list"
    exit 1
  fi

  save_history
}

cmd_delete() {
  folder_check

  if [ -z "$1" ]; then
    cmd_usage
    exit 1
  fi

  if [ -z "$2" ]; then
    echo -n "Delete $1? Are you sure?[yes/no]:"
    read ANSWER
    if [ "$ANSWER" == "yes" ]; then
      if [ -d $ROOT_FOLDER/$1 ]; then
	rm -rf $ROOT_FOLDER/$1
      else
	echo "Couldn't find $1, please check if it exists using the following command:"
	echo "  ${PROGRAM} list"
	exit 1
      fi
    fi
    exit 0
  fi

  if [ -z "$3" ]; then
    echo -n "Delete $1/$2? Are you sure?[yes/no]:"
    read ANSWER
    if [ "$ANSWER" == "yes" ]; then
      if [ -d $ROOT_FOLDER/$1/$2 ]; then
	rm -rf $ROOT_FOLDER/$1/$2
      else
	echo "Couldn't find $1/$2, please check if it exists using the following command:"
	echo "  ${PROGRAM} list"
	exit 1
      fi
    fi
    exit 0
  else
    echo -n "Delete $1/$2/$3? Are you sure?[yes/no]:"
    read ANSWER
    if [ "$ANSWER" == "yes" ]; then
      if [ -f $ROOT_FOLDER/$1/$2/$3 ]; then
	rm $ROOT_FOLDER/$1/$2/$3
      else
	echo "Couldn't find $1/$2/$3, please check if it exists using the following command:"
	echo "  ${PROGRAM} list"
	exit 1
      fi
    fi
    exit 0
  fi
}

cmd_git() {
  folder_check
  PWD_BUF=$PWD
  cd $ROOT_FOLDER
  git $@
  PWD=$PWD_BUF
}

case "$1" in
        init) shift;                    cmd_init    "$@" ;;
        list) shift;                    cmd_list    "$@" ;;
        add) shift;			cmd_add     "$@" ;;
        edit) shift;                    cmd_edit    "$@" ;;
        delete) shift;                  cmd_delete  "$@" ;;
        show) shift;                    cmd_show    "$@" ;;
        git) shift;			cmd_git     "$@" ;;
        help|wut|--help|-h) shift;      cmd_usage   "$@" ;;
        version|--version|-v) shift;    cmd_version "$@" ;;
	*)                              cmd_usage   "$@" ;;
esac

exit 0

