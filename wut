#!/bin/bash

folder_check() {
  if [ ! -d "$ROOT_FOLDER" ]; then
    echo "Couldn't find wut folder. Please initialize wut:"
    echo "  $PROGRAM init"
    exit 2
  fi 
}

cmd_init() {
  if [ -d "$ROOT_FOLDER" ]; then
    echo "Wut has already been initialized"
  else
    echo "Initializing wut.."
    mkdir $ROOT_FOLDER
  fi
}

cmd_usage() {
  folder_check
  cmd_version
  echo
  cat << EOF
  Usage:
      $PROGRAM init
          Initialize workspace
      $PROGRAM list
          List notes
      $PROGRAM add [sheet] [subject]
	  Add a new note
      $PROGRAM edit [sheet] [subject] [note]
	  Edit an existing note
      $PROGRAM delete [sheet|subject]
	  Delete a note
      $PROGRAM show [subject]
	  Show all entries of a subject
      $PROGRAM git git-command-args...
          If the password store is a git repository, execute a git command
          specified by git-command-args.
      $PROGRAM help
          Show this text.
      $PROGRAM version
          Show version information.
EOF
}

cmd_version() {
  echo "wut - ${VERSION}"
}

cmd_list() {
  folder_check
  SHEETS=($(ls $ROOT_FOLDER))
  for SHEET in ${SHEETS[@]}; do
    echo $SHEET
    SUBJECTS=($(ls $ROOT_FOLDER/$SHEET))
    for SUBJECT in ${SUBJECTS[@]}; do
      NOTES=($(ls $ROOT_FOLDER/$SHEET/$SUBJECT))
      LAST_SUBJECT=${SUBJECTS[${#SUBJECTS[@]}-1]}
      if [[ $SUBJECT == $LAST_SUBJECT ]]; then
	echo "\`-${SUBJECT}"
	SUBJECT_PREFIX="  "
      else
	echo "|-${SUBJECT}"
	SUBJECT_PREFIX="| "
      fi
      for NOTE in ${NOTES[@]}; do
	LAST_NOTE=${NOTES[${#NOTES[@]}-1]}
	if [[ $NOTE == $LAST_NOTE ]]; then
	  echo "${SUBJECT_PREFIX}\`-${NOTE}"
	else
	  echo "${SUBJECT_PREFIX}|-${NOTE}"
	fi
      done
    done
  done
}

cmd_add() {
  if [ -z "$1" ]; then
    echo "No sheetname was given. Current sheets:"
    ls $ROOT_FOLDER
    echo -n "Please enter sheet: "
    read SHEET
  else
    SHEET=$1
  fi
  mkdir $ROOT_FOLDER/$SHEET 2> /dev/null

  if [ -z "$2" ]; then
    echo "Current subjects:"
    ls $ROOT_FOLDER/$SHEET
    echo -n "Please enter subject: "
    read SUBJECT
  else
    SUBJECT=$2
  fi
  mkdir $ROOT_FOLDER/$SHEET/$SUBJECT 2> /dev/null

  echo "Current notes:"
  ls $ROOT_FOLDER/$SHEET/$SUBJECT
  echo -n "Please enter note: "
  read NOTE

  cat > $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE << "EOF"
# Hi! This is the place where you want to write your note. Please start
# every line that's code with a '$' and wut will make sure it looks a-OK!

EOF
  vim $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE
}

cmd_show() {
  echo "Error: unimplemented function"
  exit 1
}

cmd_edit() {
  if [ -z "$1" ]; then
    echo "No sheetname was given. Current sheets:"
    ls $ROOT_FOLDER
    echo -n "Please enter sheet: "
    read SHEET
  else
    SHEET=$1
  fi

  if [ -z "$2" ]; then
    echo "Current subjects:"
    ls $ROOT_FOLDER/$SHEET
    echo -n "Please enter subject: "
    read SUBJECT
  else
    SUBJECT=$2
  fi

  if [ -z "$3" ]; then
    echo "Current notes:"
    ls $ROOT_FOLDER/$SHEET/$SUBJECT
    echo -n "Please enter note: "
    read NOTE
  else
    NOTE=$3
  fi

  if [ -f $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE ]; then
    vim $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE
  else
    echo "Couldn't find that note, please check if it exists with the following command:"
    echo "  ${PROGRAM} list"
  fi
}

cmd_delete() {
  echo "Error: unimplemented function"
  exit 1
}

cmd_git() {
  echo "Error: unimplemented function"
  exit 1
}

VERSION="v0.1"
PROGRAM="${0##*/}"
COMMAND="$1"
ROOT_FOLDER="$HOME/.wut"

case "$1" in
        init) shift;                    cmd_init    "$@" ;;
        list) shift;                    cmd_list    "$@" ;;
        add) shift;			cmd_add     "$@" ;;
        edit) shift;                    cmd_edit    "$@" ;;
        delete) shift;                  cmd_delete  "$@" ;;
        show) shift;                    cmd_show    "$@" ;;
        git) shift;			cmd_git     "$@" ;;
        help|--help|-h) shift;          cmd_usage   "$@" ;;
        version|--version|-v) shift;    cmd_version "$@" ;;
	*)                              cmd_usage   "$@" ;;
esac

exit 0

