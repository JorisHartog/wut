#!/bin/bash

VERSION="v1.5"
PROGRAM="${0##*/}"

COLOR_CODE="\033[0;0m"
COLOR_COMMENT="\033[1;30m"
COLOR_SHEET="\033[0;31m"
COLOR_SUBJECT="\033[0;32m"
COLOR_NOTE="\033[1;30m"
COLOR_CLEAR="\033[0m"

ROOT_FOLDER="$HOME/.wut"

ENABLE_GIT=1
AUTO_PUSH=0

LESS_WUT=0

unset PWD_BUF

if [ -f /etc/wut.conf ]; then
  source /etc/wut.conf
fi

USAGE="wut - $VERSION

  Usage:
      $PROGRAM wut
	  Show the manpages
      $PROGRAM [subject] [note]
	  Show all notes for a given subject
      $PROGRAM -i|--init
          Initialize workspace
      $PROGRAM -l|--list
          List notes
      $PROGRAM -a|--add [sheet] [subject] [note]
	  Add a new note
      $PROGRAM -e|--edit [sheet] [subject] [note]
	  Edit an existing note
      $PROGRAM -d|--delete [sheet] [subject] [note]
	  Delete a sheet, subject or note
      $PROGRAM -g|--git [git-command-args]
          If the sheet store is a git repository, execute a git command
          specified by git-command-args.
      $PROGRAM -h|--help
          Show this text.
      $PROGRAM -v|--version
          Show version information.

Check out \`man wut\` for more info."

print_error() {
  if [ ! -z "$PWD_BUF" ]; then
    PWD=$PWD_BUF
  fi
  read line file <<< $(caller)
  echo -e "\033[0;31mAn error occurred in line $line of file $file:" >&2
  sed "${line}q;d" "$file" >&2
  exit 1
}
set -Ee
trap print_error ERR

colorize_output() {
  OLD_IFS=$IFS
  IFS=$'\n'
  while read -r LINE; do
    if [[ $LINE =~ ^# ]]; then
      echo -e "$COLOR_COMMENT$LINE$COLOR_CLEAR"
    else
      echo -e "$COLOR_CODE$LINE$COLOR_CLEAR"
    fi
  done <<< "$(grep -v '^##' $1)"
  IFS=$OLD_IFS
}

load_history() {
  folder_check
  HISTORY=($(cat $ROOT_FOLDER/.history))
  SHEET=${HISTORY[0]}
  SUBJECT=${HISTORY[1]}
  NOTE=${HISTORY[2]}
}

save_history() {
  if [ ! -z $SHEET   ]; then echo $SHEET   >  $ROOT_FOLDER/.history; fi
  if [ ! -z $SUBJECT ]; then echo $SUBJECT >> $ROOT_FOLDER/.history; fi
  if [ ! -z $NOTE    ]; then echo $NOTE    >> $ROOT_FOLDER/.history; fi
}

folder_check() {
  if [ ! -f "$ROOT_FOLDER/.history" ]; then
    echo "Couldn't find wut folder. Please initialize wut:"
    echo "  $PROGRAM --init"
    exit 1
  fi
}

git_commit() {
  if [ -x "$(command -v git)" ]; then
    if [ "$ENABLE_GIT" -eq "1" ]; then
      PWD_BUF=$PWD
      cd $ROOT_FOLDER
      git add --all
      if git diff-index --quiet HEAD --; then
        echo "Trying to commit, but no changes found!"
        exit 1
      fi
      git commit -m "wut: $1"
      PWD=$PWD_BUF
    fi
    if [ "$AUTO_PUSH" -eq "1" ]; then
      PWD_BUF=$PWD
      cd $ROOT_FOLDER
      git push origin master
      PWD=$PWD_BUF
    fi
  fi
}

cmd_init() {
  if [ -f "$ROOT_FOLDER/.history" ]; then
    echo "Wut has already been initialized"
  else
    echo "Initializing wut.."
    mkdir $ROOT_FOLDER 2> /dev/null
    echo ".history" > $ROOT_FOLDER/.gitignore
    cat > $ROOT_FOLDER/.history << "EOF"
-
-
-
EOF
    if [ -x "$(command -v git)" ]; then
      if [ "$ENABLE_GIT" -eq "1" ]; then
        git init $ROOT_FOLDER
        git_commit "Hello world!"
      fi
      echo -e "\nInitialized git repository for wut, don't forget to add a remote to use this feature:"
      echo -e "\n$ wut -g remote add origin [URL]"
      echo -e "\nAlso, it might be useful to set the AUTO_PUSH feature in /etc/wut.conf."
    fi
    echo "Done, execute \`wut wut\` to see what you can do next!"
  fi
  exit 0
}

cmd_usage() {
  echo "$USAGE"
  exit 0
}

cmd_manpage() {
  man wut
  exit 0
}

cmd_version() {
  echo "wut - $VERSION"
  exit 0
}

cmd_list() {
  folder_check

  SHEETS=($(ls $ROOT_FOLDER))
  for SHEET in ${SHEETS[@]}; do
    echo -e "${COLOR_SHEET}${SHEET}${COLOR_CLEAR}"
    SUBJECTS=($(ls $ROOT_FOLDER/$SHEET))
    for SUBJECT in ${SUBJECTS[@]}; do
      NOTES=($(ls $ROOT_FOLDER/$SHEET/$SUBJECT))
      LAST_SUBJECT=${SUBJECTS[${#SUBJECTS[@]}-1]}
      if [[ $SUBJECT == $LAST_SUBJECT ]]; then
	echo -e "\`-${COLOR_SUBJECT}${SUBJECT}${COLOR_CLEAR}"
	SUBJECT_PREFIX="  "
      else
	echo -e "|-${COLOR_SUBJECT}${SUBJECT}${COLOR_CLEAR}"
	SUBJECT_PREFIX="| "
      fi
      for NOTE in ${NOTES[@]}; do
	LAST_NOTE=${NOTES[${#NOTES[@]}-1]}
	if [[ $NOTE == $LAST_NOTE ]]; then
	  echo -e "${SUBJECT_PREFIX}\`-${COLOR_NOTE}${NOTE}${COLOR_CLEAR}"
	else
	  echo -e "${SUBJECT_PREFIX}|-${COLOR_NOTE}${NOTE}${COLOR_CLEAR}"
	fi
      done
    done
  done

  exit 0
}

cmd_add() {
  load_history

  if [ -z "$1" ]; then
    echo -n "Please enter sheet[$SHEET]: "
    read _SHEET
    if [ ! -z $_SHEET ]; then SHEET=$_SHEET; fi
  else
    SHEET=$1
  fi

  if [ -z "$2" ]; then
    echo -n "Please enter subject[$SUBJECT]: "
    read _SUBJECT
    if [ ! -z $_SUBJECT ]; then SUBJECT=$_SUBJECT; fi
  else
    SUBJECT=$2
  fi

  if [ -z "$3" ]; then
    echo -n "Please enter note[$NOTE]: "
    read _NOTE
    if [ ! -z $_NOTE ]; then NOTE=$_NOTE; fi
  else
    NOTE=$3
  fi

  if [ -f "${ROOT_FOLDER}/${SHEET}/${SUBJECT}/${NOTE}" ]; then
    echo "Note already exists! Please edit or remove the note instead."
    exit 1
  fi

  mkdir -p $ROOT_FOLDER/$SHEET/$SUBJECT 2> /dev/null
  cat > $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE << "EOF"
## Hi! This is the place where you want to write your note. Lines that start
## with '##' will not be printed, lines that start with '#' will be formatted
## as a comment and the rest as code!

EOF
  vim $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE

  git_commit "add $SHEET/$SUBJECT/$NOTE"
  save_history
  exit 0
}

cmd_edit() {
  load_history

  if [ -z "$1" ]; then
    echo -n "Please enter sheet[$SHEET]: "
    read _SHEET
    if [ ! -z $_SHEET ]; then SHEET=$_SHEET; fi
  else
    SHEET=$1
  fi

  if [ -z "$2" ]; then
    echo -n "Please enter subject[$SUBJECT]: "
    read _SUBJECT
    if [ ! -z $_SUBJECT ]; then SUBJECT=$_SUBJECT; fi
  else
    SUBJECT=$2
  fi

  if [ -z "$3" ]; then
    echo -n "Please enter note[$NOTE]: "
    read _NOTE
    if [ ! -z $_NOTE ]; then NOTE=$_NOTE; fi
  else
    NOTE=$3
  fi

  if [ -f $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE ]; then
    vim $ROOT_FOLDER/$SHEET/$SUBJECT/$NOTE
  else
    echo "Couldn't find that note, please check if it exists using the following command:"
    echo "  $PROGRAM --list"
    exit 1
  fi

  git_commit "edit $SHEET/$SUBJECT/$NODE"
  save_history
  exit 0
}

cmd_delete() {
  folder_check

  if [ -z "$1" ]; then
    echo "$USAGE"
    exit 1
  fi

  if [ -z "$2" ]; then
    echo -n "Delete $1? Are you sure?[yes/no]:"
    read ANSWER
    if [ "$ANSWER" == "yes" ]; then
      if [ -d $ROOT_FOLDER/$1 ]; then
	rm -rf $ROOT_FOLDER/$1
      else
	echo "Couldn't find $1, please check if it exists using the following command:"
	echo "  $PROGRAM --list"
	exit 1
      fi
      git_commit "delete $1"
    fi
    exit 0
  fi

  if [ -z "$3" ]; then
    echo -n "Delete $1/$2? Are you sure?[yes/no]:"
    read ANSWER
    if [ "$ANSWER" == "yes" ]; then
      if [ -d $ROOT_FOLDER/$1/$2 ]; then
	rm -rf $ROOT_FOLDER/$1/$2
      else
	echo "Couldn't find $1/$2, please check if it exists using the following command:"
	echo "  $PROGRAM --list"
	exit 1
      fi
      git_commit "delete $1/$2"
    fi
    exit 0
  else
    echo -n "Delete $1/$2/$3? Are you sure?[yes/no]:"
    read ANSWER
    if [ "$ANSWER" == "yes" ]; then
      if [ -f $ROOT_FOLDER/$1/$2/$3 ]; then
	rm $ROOT_FOLDER/$1/$2/$3
      else
	echo "Couldn't find $1/$2/$3, please check if it exists using the following command:"
	echo "  $PROGRAM --list"
	exit 1
      fi
      git_commit "delete $1/$2/$3"
    fi
    exit 0
  fi
}

cmd_git() {
  folder_check

  PWD_BUF=$PWD
  cd $ROOT_FOLDER
  git $@
  PWD=$PWD_BUF

  exit 0
}

cmd_show_subject() {
  folder_check

  NOTE_FOUND=0
  SHEETS=($(ls $ROOT_FOLDER))
  for SHEET in ${SHEETS[@]}; do
    if [ -d $ROOT_FOLDER/$SHEET/$1 ]; then
      if [ -z "$2" ]; then
	NOTES=($(ls $ROOT_FOLDER/$SHEET/$1))
      else
	if [ -f $ROOT_FOLDER/$SHEET/$1/$2 ]; then
	  NOTES=($2)
	fi
      fi
      if [ ! -z "$NOTES" ]; then
        for NOTE in ${NOTES[@]}; do
	  echo -e $COLOR_SUBJECT
	  echo "# Sheet: ${SHEET}"
	  echo "# Subject: ${1}"
	  echo "# Note: ${NOTE}"
	  echo -e $COLOR_CLEAR
	  colorize_output $ROOT_FOLDER/$SHEET/$1/$NOTE
          NOTE_FOUND=1
        done
      fi
    fi
  done

  if [[ $NOTE_FOUND == 0 ]]; then
    SEARCH_RESULTS=$(grep -Ri "$1" $ROOT_FOLDER | awk -F '/.wut/' '{ if ( $2 !~ /^\.git.*$|^\.history.*$/ ) { print $2 } }' | awk -F ':' '{ print "* " $1 }' | sort | uniq )
    if [ -z "$SEARCH_RESULTS" ]; then
      echo "$USAGE"
      exit 1
    else
      echo -en "$COLOR_COMMENT"
      echo "Couldn't find $1 as a subject, but it was found in the following notes:"
      echo -e "$COLOR_CODE$SEARCH_RESULTS$COLOR_CLEAR"
    fi
  fi

  exit 0
}

case "$1" in
  -i|--init) shift;     cmd_init    "$@" ;;
  -l|--list) shift;     cmd_list    "$@" ;;
  -a|--add) shift;      cmd_add     "$@" ;;
  -e|--edit) shift;     cmd_edit    "$@" ;;
  -d|--delete) shift;   cmd_delete  "$@" ;;
  -g|--git) shift;      cmd_git     "$@" ;;
  -h|--help) shift;     cmd_usage   "$@" ;;
  wut) shift;           cmd_manpage "$@" ;;
  -v|--version) shift;  cmd_version "$@" ;;
esac

if [ -z $1 ]; then
  if [ "$LESS_WUT" -eq "1" ]; then
    cmd_list | less -R
  else
    cmd_list
  fi
else
  cmd_show_subject $@
fi

